// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DepositNFT extends ethereum.Event {
  get params(): DepositNFT__Params {
    return new DepositNFT__Params(this);
  }
}

export class DepositNFT__Params {
  _event: DepositNFT;

  constructor(event: DepositNFT) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TimelockNFT extends ethereum.Event {
  get params(): TimelockNFT__Params {
    return new TimelockNFT__Params(this);
  }
}

export class TimelockNFT__Params {
  _event: TimelockNFT;

  constructor(event: TimelockNFT) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get releaseTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UpdateUserConfiguration extends ethereum.Event {
  get params(): UpdateUserConfiguration__Params {
    return new UpdateUserConfiguration__Params(this);
  }
}

export class UpdateUserConfiguration__Params {
  _event: UpdateUserConfiguration;

  constructor(event: UpdateUserConfiguration) {
    this._event = event;
  }

  get _user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldWithdrawAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newWithdrawAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get locktime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class WithdrawNFT extends ethereum.Event {
  get params(): WithdrawNFT__Params {
    return new WithdrawNFT__Params(this);
  }
}

export class WithdrawNFT__Params {
  _event: WithdrawNFT;

  constructor(event: WithdrawNFT) {
    this._event = event;
  }

  get _to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFTTreasuryLite__getWithdrawInfoResultValue0Struct extends ethereum.Tuple {
  get withdrawAddress(): Address {
    return this[0].toAddress();
  }

  get minimumLockTime(): BigInt {
    return this[1].toBigInt();
  }

  get withdrawAddressLastSet(): BigInt {
    return this[2].toBigInt();
  }
}

export class NFTTreasuryLite extends ethereum.SmartContract {
  static bind(address: Address): NFTTreasuryLite {
    return new NFTTreasuryLite("NFTTreasuryLite", address);
  }

  getWithdrawInfo(): NFTTreasuryLite__getWithdrawInfoResultValue0Struct {
    let result = super.call(
      "getWithdrawInfo",
      "getWithdrawInfo():((address,uint256,uint256))",
      []
    );

    return changetype<NFTTreasuryLite__getWithdrawInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getWithdrawInfo(): ethereum.CallResult<
    NFTTreasuryLite__getWithdrawInfoResultValue0Struct
  > {
    let result = super.tryCall(
      "getWithdrawInfo",
      "getWithdrawInfo():((address,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFTTreasuryLite__getWithdrawInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  isTokenOwner(user: Address, tokenAddress: Address, tokenId: BigInt): boolean {
    let result = super.call(
      "isTokenOwner",
      "isTokenOwner(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isTokenOwner(
    user: Address,
    tokenAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTokenOwner",
      "isTokenOwner(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(tokenAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class AddTimelockCall extends ethereum.Call {
  get inputs(): AddTimelockCall__Inputs {
    return new AddTimelockCall__Inputs(this);
  }

  get outputs(): AddTimelockCall__Outputs {
    return new AddTimelockCall__Outputs(this);
  }
}

export class AddTimelockCall__Inputs {
  _call: AddTimelockCall;

  constructor(call: AddTimelockCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get releaseTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddTimelockCall__Outputs {
  _call: AddTimelockCall;

  constructor(call: AddTimelockCall) {
    this._call = call;
  }
}

export class DepositTokenCall extends ethereum.Call {
  get inputs(): DepositTokenCall__Inputs {
    return new DepositTokenCall__Inputs(this);
  }

  get outputs(): DepositTokenCall__Outputs {
    return new DepositTokenCall__Outputs(this);
  }
}

export class DepositTokenCall__Inputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get onBehalfOf(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class DepositTokenCall__Outputs {
  _call: DepositTokenCall;

  constructor(call: DepositTokenCall) {
    this._call = call;
  }
}

export class SetWithdrawInfoCall extends ethereum.Call {
  get inputs(): SetWithdrawInfoCall__Inputs {
    return new SetWithdrawInfoCall__Inputs(this);
  }

  get outputs(): SetWithdrawInfoCall__Outputs {
    return new SetWithdrawInfoCall__Outputs(this);
  }
}

export class SetWithdrawInfoCall__Inputs {
  _call: SetWithdrawInfoCall;

  constructor(call: SetWithdrawInfoCall) {
    this._call = call;
  }

  get withdrawAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minimumLockTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetWithdrawInfoCall__Outputs {
  _call: SetWithdrawInfoCall;

  constructor(call: SetWithdrawInfoCall) {
    this._call = call;
  }
}

export class WithdrawTokenCall extends ethereum.Call {
  get inputs(): WithdrawTokenCall__Inputs {
    return new WithdrawTokenCall__Inputs(this);
  }

  get outputs(): WithdrawTokenCall__Outputs {
    return new WithdrawTokenCall__Outputs(this);
  }
}

export class WithdrawTokenCall__Inputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawTokenCall__Outputs {
  _call: WithdrawTokenCall;

  constructor(call: WithdrawTokenCall) {
    this._call = call;
  }
}
